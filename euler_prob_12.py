# Project Euler - Problem 12 - Highly divisible triangular number

# The sequence of triangle numbers is generated by adding the natural numbers.
# So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
# The first ten terms would be: 1, 3, 6, 10, 15, 21, 28, 36, 45, 55,...

# What is the value of the first triangle number to have over five hundred divisors?

import math

# function to find the sum of natural numbers where n represents the Nth Triangle number
def triangle_number(n):
	return (n*(n+1))/2

# brute force algo to find all factors of a given number
def find_all_factors(n): 
	factors = []
	for i in range(1,n+1):
		if n%i == 0:
			factors.append(i)
	return factors

# better/faster algo to find all factors of a given number 
# uses the square root of n to reduce search further and appends pairs of factors
def find_all_factors2(n): 
	factors = []
	for i in range(1,int(math.ceil(math.sqrt(n)))):
		if n%i == 0:
			factors.append(i)
			factors.append(n//i)
	factors.sort()
	return factors


x = 20
results = find_all_factors2(triangle_number(x))
while len(results) < 500:
	x += 1
	results = find_all_factors2(triangle_number(x))

print("Triangle Number (N, Value): ",(x, triangle_number(x)))
print("Num of factors: ", len(results))
